plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'kr.pincoin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'

	compileOnly 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // JPA, Hibernate
	implementation 'org.springframework.boot:spring-boot-starter-validation' // DTO 빈 검증
	implementation 'org.springframework.boot:spring-boot-starter-web' // Rest Controller
	implementation 'org.springframework.boot:spring-boot-starter-webflux' // WebClient, Mono, Flux 리액티브
	implementation 'org.springframework.boot:spring-boot-starter-security' // spring-security 추가
	implementation 'org.springframework.boot:spring-boot-configuration-processor' // annotationProcessor: JSONException

	// JJWT-API 추가 - 2022-04-28 (버전 명시): https://mvnrepository.com/artifact/io.jsonwebtoken
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// QueryDSL 추가 - 2021-06-21 (버전 및 태그 명시): https://mvnrepository.com/artifact/com.querydsl/querydsl-jpa
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// WebFlux WebClient 애플실리콘 지원
	boolean isMacOS  = System.getProperty("os.name").startsWith("Mac OS X") // os.name=Mac OS X
	String architecture = System.getProperty("os.arch").toLowerCase() // os.arch=aarch64

	if (isMacOS && architecture == "aarch64") {
		implementation("io.netty:netty-resolver-dns-native-macos:4.1.86.Final:osx-aarch_64")
	}

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar { // 버전 이름 없이 jar 빌드
	archiveFileName = "${rootProject.name}.jar"
}

jar { // plain jar 빌드 안 함
	enabled = false
}
